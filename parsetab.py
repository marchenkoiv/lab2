
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightINCDECrightELSELPARENleftRPARENBACK BAR BOOLEAN CBOOLEAN CINT CLR DEC DO ELSE EMP EQUALS FALSE GT IF INC INCORRECT INT LEFT LOOK LPAREN LT MAP NAME NEWLINE NOT NUMBER OR PROC RESET RIGHT RPAREN SET STEP TRUE WHILEprogram : statementsstatements_group : LPAREN statements inner_statement RPAREN\n                            | inner_statementinner_statement : declaration\n                     | assignment\n                     | while\n                     | if\n                     | command\n                     | procedure\n                     | call\n                     | empty\n                     | cell_proc\n                     | arithmetic_expressionstatements : statements statement\n                      | statementstatement : declaration NEWLINE\n                     | assignment NEWLINE\n                     | while NEWLINE\n                     | if NEWLINE\n                     | command NEWLINE\n                     | procedure NEWLINE\n                     | call NEWLINE\n                     | empty NEWLINE\n                     | cell_proc NEWLINE\n                     | arithmetic_expression NEWLINEdeclaration : type namedeclaration : type errortype : INT\n                | CINT\n                | BOOLEAN\n                | CBOOLEAN\n                | MAP assignment : name EQUALS expression\n                      | declaration EQUALS expressionassignment : name EQUALS errorname : NAMEnumber : NUMBERexpression : name\n                      | const\n                      | number\n                      | logic_expression\n                      | arithmetic_expressionconst : TRUE\n                 | FALSE\n                        logic_expression : LT arithmetic_expression arithmetic_expression\n                           | GT arithmetic_expression arithmetic_expression\n                           | NOT logic_expression\n                           | NOT call\n                           | OR or_arg or_argarithmetic_expression : INC first_ar second_ar\n                                  | DEC first_ar second_arfirst_ar : name\n                  | arithmetic_expression\n                  | callsecond_ar : name\n                  | arithmetic_expression\n                  | call\n                  | number\n                  | logic_expression\n                  | constor_arg : call\n                  | logic_expression\n                  | TRUE\n                  | FALSEwhile : WHILE logic_expression DO NEWLINE statements_groupwhile : DO error\n                  | WHILE errorif : IF logic_expression NEWLINE statements_group\n              | IF logic_expression NEWLINE statements_group ELSE statements_groupif : IF errorprocedure : PROC NAME parameters NEWLINE statements_group procedure : PROC errorcommand :  command errorcommand : LEFT\n                    | RIGHT\n                    | BACK\n                    | STEP\n                    | LOOKcall : NAME parameters cell_proc : BAR cell_arg\n                     | EMP cell_arg\n                     | SET cell_arg\n                     | RESET cell_arg\n                     | CLR cell_argcell_arg : name name number numbercell_proc :  BAR error\n                     | EMP error\n                     | SET error\n                     | RESET error\n                     | CLR errorcall : NAME error empty : parameters : parameters name\n                      | name'
    
_lr_action_items = {'WHILE':([0,2,3,38,39,41,42,43,44,46,47,48,49,50,108,120,125,137,140,141,],[16,16,-15,-14,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,16,16,16,16,16,16,]),'DO':([0,2,3,38,39,41,42,43,44,46,47,48,49,50,53,55,66,67,68,84,92,93,94,100,101,104,105,106,107,108,110,112,113,114,115,116,117,118,119,120,121,122,123,125,137,140,141,],[17,17,-15,-14,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-36,97,-79,-91,-94,-36,-43,-44,-37,-47,-48,-61,-62,-63,-64,17,-93,-50,-55,-56,-57,-58,-59,-60,-51,17,-45,-46,-49,17,17,17,17,]),'IF':([0,2,3,38,39,41,42,43,44,46,47,48,49,50,108,120,125,137,140,141,],[18,18,-15,-14,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,18,18,18,18,18,18,]),'LEFT':([0,2,3,38,39,41,42,43,44,46,47,48,49,50,108,120,125,137,140,141,],[19,19,-15,-14,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,19,19,19,19,19,19,]),'RIGHT':([0,2,3,38,39,41,42,43,44,46,47,48,49,50,108,120,125,137,140,141,],[20,20,-15,-14,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,20,20,20,20,20,20,]),'BACK':([0,2,3,38,39,41,42,43,44,46,47,48,49,50,108,120,125,137,140,141,],[21,21,-15,-14,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,21,21,21,21,21,21,]),'STEP':([0,2,3,38,39,41,42,43,44,46,47,48,49,50,108,120,125,137,140,141,],[22,22,-15,-14,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,22,22,22,22,22,22,]),'LOOK':([0,2,3,38,39,41,42,43,44,46,47,48,49,50,108,120,125,137,140,141,],[23,23,-15,-14,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,23,23,23,23,23,23,]),'PROC':([0,2,3,38,39,41,42,43,44,46,47,48,49,50,108,120,125,137,140,141,],[24,24,-15,-14,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,24,24,24,24,24,24,]),'NAME':([0,2,3,14,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,53,54,59,60,64,66,67,68,71,80,81,82,83,84,85,92,93,94,100,101,102,103,104,105,106,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,125,137,140,141,],[25,25,-15,53,64,53,53,53,53,53,53,84,84,-28,-29,-30,-31,-32,-14,-16,53,-17,-18,-19,-20,-21,-22,-23,-24,-25,-36,53,102,102,53,53,-91,-94,53,84,-52,-53,-54,53,84,-43,-44,-37,-47,-48,53,102,-61,-62,-63,-64,25,53,-93,-50,-55,-56,-57,-58,-59,-60,-51,25,-45,-46,-49,25,25,25,25,]),'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,13,19,20,21,22,23,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,56,61,62,63,65,66,67,68,69,70,72,73,74,75,76,77,78,79,84,86,87,88,89,90,91,92,93,94,95,96,97,100,101,104,105,106,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,139,140,141,142,143,144,146,147,148,149,150,151,152,153,154,155,156,],[-92,-92,-15,39,41,42,43,44,46,47,48,49,50,-74,-75,-76,-77,-78,-14,-16,-17,-18,-19,-20,-73,-21,-22,-23,-24,-25,-26,-27,-36,-67,-66,108,-70,-72,-79,-91,-94,-80,-86,-81,-87,-82,-88,-83,-89,-84,-90,-36,-34,-38,-39,-40,-41,-42,-43,-44,-37,-33,-35,120,-47,-48,-61,-62,-63,-64,-92,137,-93,-50,-55,-56,-57,-58,-59,-60,-51,-92,-45,-46,-49,-68,-92,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-92,-65,-92,-92,-71,-85,-69,39,41,42,43,44,46,47,48,49,50,-2,]),'BAR':([0,2,3,38,39,41,42,43,44,46,47,48,49,50,108,120,125,137,140,141,],[26,26,-15,-14,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,26,26,26,26,26,26,]),'EMP':([0,2,3,38,39,41,42,43,44,46,47,48,49,50,108,120,125,137,140,141,],[27,27,-15,-14,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,27,27,27,27,27,27,]),'SET':([0,2,3,38,39,41,42,43,44,46,47,48,49,50,108,120,125,137,140,141,],[28,28,-15,-14,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,28,28,28,28,28,28,]),'RESET':([0,2,3,38,39,41,42,43,44,46,47,48,49,50,108,120,125,137,140,141,],[29,29,-15,-14,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,29,29,29,29,29,29,]),'CLR':([0,2,3,38,39,41,42,43,44,46,47,48,49,50,108,120,125,137,140,141,],[30,30,-15,-14,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,30,30,30,30,30,30,]),'INC':([0,2,3,31,32,38,39,40,41,42,43,44,46,47,48,49,50,53,54,57,58,66,67,68,80,81,82,83,84,85,92,93,94,98,99,100,101,104,105,106,107,108,110,112,113,114,115,116,117,118,119,120,121,122,123,125,137,140,141,],[31,31,-15,31,31,-14,-16,31,-17,-18,-19,-20,-21,-22,-23,-24,-25,-36,31,31,31,-79,-91,-94,31,-52,-53,-54,-36,31,-43,-44,-37,31,31,-47,-48,-61,-62,-63,-64,31,-93,-50,-55,-56,-57,-58,-59,-60,-51,31,-45,-46,-49,31,31,31,31,]),'DEC':([0,2,3,31,32,38,39,40,41,42,43,44,46,47,48,49,50,53,54,57,58,66,67,68,80,81,82,83,84,85,92,93,94,98,99,100,101,104,105,106,107,108,110,112,113,114,115,116,117,118,119,120,121,122,123,125,137,140,141,],[32,32,-15,32,32,-14,-16,32,-17,-18,-19,-20,-21,-22,-23,-24,-25,-36,32,32,32,-79,-91,-94,32,-52,-53,-54,-36,32,-43,-44,-37,32,32,-47,-48,-61,-62,-63,-64,32,-93,-50,-55,-56,-57,-58,-59,-60,-51,32,-45,-46,-49,32,32,32,32,]),'INT':([0,2,3,38,39,41,42,43,44,46,47,48,49,50,108,120,125,137,140,141,],[33,33,-15,-14,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,33,33,33,33,33,33,]),'CINT':([0,2,3,38,39,41,42,43,44,46,47,48,49,50,108,120,125,137,140,141,],[34,34,-15,-14,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,34,34,34,34,34,34,]),'BOOLEAN':([0,2,3,38,39,41,42,43,44,46,47,48,49,50,108,120,125,137,140,141,],[35,35,-15,-14,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,35,35,35,35,35,35,]),'CBOOLEAN':([0,2,3,38,39,41,42,43,44,46,47,48,49,50,108,120,125,137,140,141,],[36,36,-15,-14,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,36,36,36,36,36,36,]),'MAP':([0,2,3,38,39,41,42,43,44,46,47,48,49,50,108,120,125,137,140,141,],[37,37,-15,-14,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,37,37,37,37,37,37,]),'$end':([1,2,3,38,39,41,42,43,44,46,47,48,49,50,],[0,-1,-15,-14,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,]),'RPAREN':([3,19,20,21,22,23,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,56,61,63,65,66,67,68,69,70,72,73,74,75,76,77,78,79,84,86,87,88,89,90,91,92,93,94,95,96,100,101,104,105,106,107,108,110,112,113,114,115,116,117,118,119,120,121,122,123,124,126,127,128,129,130,131,132,133,134,135,136,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,],[-15,-74,-75,-76,-77,-78,-14,-16,-17,-18,-19,-20,-73,-21,-22,-23,-24,-25,-26,-27,-36,-67,-66,-70,-72,-79,-91,-94,-80,-86,-81,-87,-82,-88,-83,-89,-84,-90,-36,-34,-38,-39,-40,-41,-42,-43,-44,-37,-33,-35,-47,-48,-61,-62,-63,-64,-92,-93,-50,-55,-56,-57,-58,-59,-60,-51,-92,-45,-46,-49,-68,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-92,-65,-92,-92,-71,-85,-69,156,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-2,]),'EQUALS':([4,15,25,51,52,53,127,146,],[40,54,-36,-26,-27,-36,40,40,]),'error':([8,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,45,54,84,102,131,150,],[45,52,56,61,63,-74,-75,-76,-77,-78,65,67,70,73,75,77,79,-28,-29,-30,-31,-32,-73,96,67,67,45,45,]),'LT':([16,18,40,53,54,59,60,66,67,68,80,81,82,83,84,85,92,93,94,100,101,103,104,105,106,107,110,112,113,114,115,116,117,118,119,121,122,123,],[57,57,57,-36,57,57,57,-79,-91,-94,57,-52,-53,-54,-36,57,-43,-44,-37,-47,-48,57,-61,-62,-63,-64,-93,-50,-55,-56,-57,-58,-59,-60,-51,-45,-46,-49,]),'GT':([16,18,40,53,54,59,60,66,67,68,80,81,82,83,84,85,92,93,94,100,101,103,104,105,106,107,110,112,113,114,115,116,117,118,119,121,122,123,],[58,58,58,-36,58,58,58,-79,-91,-94,58,-52,-53,-54,-36,58,-43,-44,-37,-47,-48,58,-61,-62,-63,-64,-93,-50,-55,-56,-57,-58,-59,-60,-51,-45,-46,-49,]),'NOT':([16,18,40,53,54,59,60,66,67,68,80,81,82,83,84,85,92,93,94,100,101,103,104,105,106,107,110,112,113,114,115,116,117,118,119,121,122,123,],[59,59,59,-36,59,59,59,-79,-91,-94,59,-52,-53,-54,-36,59,-43,-44,-37,-47,-48,59,-61,-62,-63,-64,-93,-50,-55,-56,-57,-58,-59,-60,-51,-45,-46,-49,]),'OR':([16,18,40,53,54,59,60,66,67,68,80,81,82,83,84,85,92,93,94,100,101,103,104,105,106,107,110,112,113,114,115,116,117,118,119,121,122,123,],[60,60,60,-36,60,60,60,-79,-91,-94,60,-52,-53,-54,-36,60,-43,-44,-37,-47,-48,60,-61,-62,-63,-64,-93,-50,-55,-56,-57,-58,-59,-60,-51,-45,-46,-49,]),'ELSE':([19,20,21,22,23,45,51,52,53,56,61,63,65,66,67,68,69,70,72,73,74,75,76,77,78,79,84,86,87,88,89,90,91,92,93,94,95,96,100,101,104,105,106,107,108,110,112,113,114,115,116,117,118,119,120,121,122,123,124,126,127,128,129,130,131,132,133,134,135,136,137,139,140,142,143,144,156,],[-74,-75,-76,-77,-78,-73,-26,-27,-36,-67,-66,-70,-72,-79,-91,-94,-80,-86,-81,-87,-82,-88,-83,-89,-84,-90,-36,-34,-38,-39,-40,-41,-42,-43,-44,-37,-33,-35,-47,-48,-61,-62,-63,-64,-92,-93,-50,-55,-56,-57,-58,-59,-60,-51,-92,-45,-46,-49,140,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-92,-65,-92,-71,-85,-69,-2,]),'TRUE':([40,53,54,60,66,67,68,80,81,82,83,84,85,92,93,94,100,101,103,104,105,106,107,110,112,113,114,115,116,117,118,119,121,122,123,],[92,-36,92,106,-79,-91,-94,92,-52,-53,-54,-36,92,-43,-44,-37,-47,-48,106,-61,-62,-63,-64,-93,-50,-55,-56,-57,-58,-59,-60,-51,-45,-46,-49,]),'FALSE':([40,53,54,60,66,67,68,80,81,82,83,84,85,92,93,94,100,101,103,104,105,106,107,110,112,113,114,115,116,117,118,119,121,122,123,],[93,-36,93,107,-79,-91,-94,93,-52,-53,-54,-36,93,-43,-44,-37,-47,-48,107,-61,-62,-63,-64,-93,-50,-55,-56,-57,-58,-59,-60,-51,-45,-46,-49,]),'NUMBER':([40,53,54,66,67,68,80,81,82,83,84,85,92,93,94,100,101,104,105,106,107,110,111,112,113,114,115,116,117,118,119,121,122,123,138,],[94,-36,94,-79,-91,-94,94,-52,-53,-54,-36,94,-43,-44,-37,-47,-48,-61,-62,-63,-64,-93,94,-50,-55,-56,-57,-58,-59,-60,-51,-45,-46,-49,94,]),'LPAREN':([108,120,137,140,],[125,125,125,125,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,125,],[2,141,]),'statement':([0,2,125,141,],[3,38,3,38,]),'declaration':([0,2,108,120,125,137,140,141,],[4,4,127,127,4,127,127,146,]),'assignment':([0,2,108,120,125,137,140,141,],[5,5,128,128,5,128,128,147,]),'while':([0,2,108,120,125,137,140,141,],[6,6,129,129,6,129,129,148,]),'if':([0,2,108,120,125,137,140,141,],[7,7,130,130,7,130,130,149,]),'command':([0,2,108,120,125,137,140,141,],[8,8,131,131,8,131,131,150,]),'procedure':([0,2,108,120,125,137,140,141,],[9,9,132,132,9,132,132,151,]),'call':([0,2,31,32,59,60,80,85,103,108,120,125,137,140,141,],[10,10,83,83,101,104,115,115,104,133,133,10,133,133,152,]),'empty':([0,2,108,120,125,137,140,141,],[11,11,134,134,11,134,134,153,]),'cell_proc':([0,2,108,120,125,137,140,141,],[12,12,135,135,12,135,135,154,]),'arithmetic_expression':([0,2,31,32,40,54,57,58,80,85,98,99,108,120,125,137,140,141,],[13,13,82,82,91,91,98,99,114,114,121,122,136,136,13,136,136,155,]),'type':([0,2,108,120,125,137,140,141,],[14,14,14,14,14,14,14,14,]),'name':([0,2,14,25,26,27,28,29,30,31,32,40,54,64,66,71,80,84,85,102,108,109,120,125,137,140,141,],[15,15,51,68,71,71,71,71,71,81,81,87,87,68,110,111,113,68,113,68,15,110,15,15,15,15,15,]),'logic_expression':([16,18,40,54,59,60,80,85,103,],[55,62,90,90,100,105,117,117,105,]),'parameters':([25,64,84,102,],[66,109,66,66,]),'cell_arg':([26,27,28,29,30,],[69,72,74,76,78,]),'first_ar':([31,32,],[80,85,]),'expression':([40,54,],[86,95,]),'const':([40,54,80,85,],[88,88,118,118,]),'number':([40,54,80,85,111,138,],[89,89,116,116,138,143,]),'or_arg':([60,103,],[103,123,]),'second_ar':([80,85,],[112,119,]),'statements_group':([108,120,137,140,],[124,139,142,144,]),'inner_statement':([108,120,137,140,141,],[126,126,126,126,145,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',28),
  ('statements_group -> LPAREN statements inner_statement RPAREN','statements_group',4,'p_statements_group','parser.py',33),
  ('statements_group -> inner_statement','statements_group',1,'p_statements_group','parser.py',34),
  ('inner_statement -> declaration','inner_statement',1,'p_inner_statement','parser.py',42),
  ('inner_statement -> assignment','inner_statement',1,'p_inner_statement','parser.py',43),
  ('inner_statement -> while','inner_statement',1,'p_inner_statement','parser.py',44),
  ('inner_statement -> if','inner_statement',1,'p_inner_statement','parser.py',45),
  ('inner_statement -> command','inner_statement',1,'p_inner_statement','parser.py',46),
  ('inner_statement -> procedure','inner_statement',1,'p_inner_statement','parser.py',47),
  ('inner_statement -> call','inner_statement',1,'p_inner_statement','parser.py',48),
  ('inner_statement -> empty','inner_statement',1,'p_inner_statement','parser.py',49),
  ('inner_statement -> cell_proc','inner_statement',1,'p_inner_statement','parser.py',50),
  ('inner_statement -> arithmetic_expression','inner_statement',1,'p_inner_statement','parser.py',51),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',57),
  ('statements -> statement','statements',1,'p_statements','parser.py',58),
  ('statement -> declaration NEWLINE','statement',2,'p_statement','parser.py',66),
  ('statement -> assignment NEWLINE','statement',2,'p_statement','parser.py',67),
  ('statement -> while NEWLINE','statement',2,'p_statement','parser.py',68),
  ('statement -> if NEWLINE','statement',2,'p_statement','parser.py',69),
  ('statement -> command NEWLINE','statement',2,'p_statement','parser.py',70),
  ('statement -> procedure NEWLINE','statement',2,'p_statement','parser.py',71),
  ('statement -> call NEWLINE','statement',2,'p_statement','parser.py',72),
  ('statement -> empty NEWLINE','statement',2,'p_statement','parser.py',73),
  ('statement -> cell_proc NEWLINE','statement',2,'p_statement','parser.py',74),
  ('statement -> arithmetic_expression NEWLINE','statement',2,'p_statement','parser.py',75),
  ('declaration -> type name','declaration',2,'p_declaration','parser.py',82),
  ('declaration -> type error','declaration',2,'p_declaration_error','parser.py',87),
  ('type -> INT','type',1,'p_type','parser.py',93),
  ('type -> CINT','type',1,'p_type','parser.py',94),
  ('type -> BOOLEAN','type',1,'p_type','parser.py',95),
  ('type -> CBOOLEAN','type',1,'p_type','parser.py',96),
  ('type -> MAP','type',1,'p_type','parser.py',97),
  ('assignment -> name EQUALS expression','assignment',3,'p_assignment','parser.py',102),
  ('assignment -> declaration EQUALS expression','assignment',3,'p_assignment','parser.py',103),
  ('assignment -> name EQUALS error','assignment',3,'p_assignment_err','parser.py',108),
  ('name -> NAME','name',1,'p_name','parser.py',114),
  ('number -> NUMBER','number',1,'p_number','parser.py',119),
  ('expression -> name','expression',1,'p_expression','parser.py',124),
  ('expression -> const','expression',1,'p_expression','parser.py',125),
  ('expression -> number','expression',1,'p_expression','parser.py',126),
  ('expression -> logic_expression','expression',1,'p_expression','parser.py',127),
  ('expression -> arithmetic_expression','expression',1,'p_expression','parser.py',128),
  ('const -> TRUE','const',1,'p_const','parser.py',133),
  ('const -> FALSE','const',1,'p_const','parser.py',134),
  ('logic_expression -> LT arithmetic_expression arithmetic_expression','logic_expression',3,'p_logic_expression','parser.py',140),
  ('logic_expression -> GT arithmetic_expression arithmetic_expression','logic_expression',3,'p_logic_expression','parser.py',141),
  ('logic_expression -> NOT logic_expression','logic_expression',2,'p_logic_expression','parser.py',142),
  ('logic_expression -> NOT call','logic_expression',2,'p_logic_expression','parser.py',143),
  ('logic_expression -> OR or_arg or_arg','logic_expression',3,'p_logic_expression','parser.py',144),
  ('arithmetic_expression -> INC first_ar second_ar','arithmetic_expression',3,'p_arithmetic_expression','parser.py',152),
  ('arithmetic_expression -> DEC first_ar second_ar','arithmetic_expression',3,'p_arithmetic_expression','parser.py',153),
  ('first_ar -> name','first_ar',1,'p_first_ar','parser.py',158),
  ('first_ar -> arithmetic_expression','first_ar',1,'p_first_ar','parser.py',159),
  ('first_ar -> call','first_ar',1,'p_first_ar','parser.py',160),
  ('second_ar -> name','second_ar',1,'p_second_ar','parser.py',165),
  ('second_ar -> arithmetic_expression','second_ar',1,'p_second_ar','parser.py',166),
  ('second_ar -> call','second_ar',1,'p_second_ar','parser.py',167),
  ('second_ar -> number','second_ar',1,'p_second_ar','parser.py',168),
  ('second_ar -> logic_expression','second_ar',1,'p_second_ar','parser.py',169),
  ('second_ar -> const','second_ar',1,'p_second_ar','parser.py',170),
  ('or_arg -> call','or_arg',1,'p_or_arg','parser.py',175),
  ('or_arg -> logic_expression','or_arg',1,'p_or_arg','parser.py',176),
  ('or_arg -> TRUE','or_arg',1,'p_or_arg','parser.py',177),
  ('or_arg -> FALSE','or_arg',1,'p_or_arg','parser.py',178),
  ('while -> WHILE logic_expression DO NEWLINE statements_group','while',5,'p_while','parser.py',183),
  ('while -> DO error','while',2,'p_while_err','parser.py',188),
  ('while -> WHILE error','while',2,'p_while_err','parser.py',189),
  ('if -> IF logic_expression NEWLINE statements_group','if',4,'p_if','parser.py',195),
  ('if -> IF logic_expression NEWLINE statements_group ELSE statements_group','if',6,'p_if','parser.py',196),
  ('if -> IF error','if',2,'p_if_err','parser.py',204),
  ('procedure -> PROC NAME parameters NEWLINE statements_group','procedure',5,'p_procedure','parser.py',210),
  ('procedure -> PROC error','procedure',2,'p_procedure_err','parser.py',219),
  ('command -> command error','command',2,'p_command_error','parser.py',225),
  ('command -> LEFT','command',1,'p_command','parser.py',231),
  ('command -> RIGHT','command',1,'p_command','parser.py',232),
  ('command -> BACK','command',1,'p_command','parser.py',233),
  ('command -> STEP','command',1,'p_command','parser.py',234),
  ('command -> LOOK','command',1,'p_command','parser.py',235),
  ('call -> NAME parameters','call',2,'p_call','parser.py',240),
  ('cell_proc -> BAR cell_arg','cell_proc',2,'p_cell_proc','parser.py',248),
  ('cell_proc -> EMP cell_arg','cell_proc',2,'p_cell_proc','parser.py',249),
  ('cell_proc -> SET cell_arg','cell_proc',2,'p_cell_proc','parser.py',250),
  ('cell_proc -> RESET cell_arg','cell_proc',2,'p_cell_proc','parser.py',251),
  ('cell_proc -> CLR cell_arg','cell_proc',2,'p_cell_proc','parser.py',252),
  ('cell_arg -> name name number number','cell_arg',4,'p_cell_arg','parser.py',257),
  ('cell_proc -> BAR error','cell_proc',2,'p_call_err0','parser.py',262),
  ('cell_proc -> EMP error','cell_proc',2,'p_call_err0','parser.py',263),
  ('cell_proc -> SET error','cell_proc',2,'p_call_err0','parser.py',264),
  ('cell_proc -> RESET error','cell_proc',2,'p_call_err0','parser.py',265),
  ('cell_proc -> CLR error','cell_proc',2,'p_call_err0','parser.py',266),
  ('call -> NAME error','call',2,'p_call_err','parser.py',272),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',278),
  ('parameters -> parameters name','parameters',2,'p_parameters','parser.py',283),
  ('parameters -> name','parameters',1,'p_parameters','parser.py',284),
]
